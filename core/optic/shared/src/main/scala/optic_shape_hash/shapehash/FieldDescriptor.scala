// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package optic_shape_hash.shapehash

@SerialVersionUID(0L)
final case class FieldDescriptor(
    key: _root_.scala.Predef.String = "",
    hash: _root_.scala.Option[optic_shape_hash.shapehash.ShapeDescriptor] = _root_.scala.None
    ) extends scalapb.GeneratedMessage with scalapb.Message[FieldDescriptor] with scalapb.lenses.Updatable[FieldDescriptor] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = key
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (hash.isDefined) {
        val __value = hash.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = key
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      hash.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): optic_shape_hash.shapehash.FieldDescriptor = {
      var __key = this.key
      var __hash = this.hash
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readString()
          case 18 =>
            __hash = Option(_root_.scalapb.LiteParser.readMessage(_input__, __hash.getOrElse(optic_shape_hash.shapehash.ShapeDescriptor.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      optic_shape_hash.shapehash.FieldDescriptor(
          key = __key,
          hash = __hash
      )
    }
    def withKey(__v: _root_.scala.Predef.String): FieldDescriptor = copy(key = __v)
    def getHash: optic_shape_hash.shapehash.ShapeDescriptor = hash.getOrElse(optic_shape_hash.shapehash.ShapeDescriptor.defaultInstance)
    def clearHash: FieldDescriptor = copy(hash = _root_.scala.None)
    def withHash(__v: optic_shape_hash.shapehash.ShapeDescriptor): FieldDescriptor = copy(hash = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = key
          if (__t != "") __t else null
        }
        case 2 => hash.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(key)
        case 2 => hash.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = optic_shape_hash.shapehash.FieldDescriptor
}

object FieldDescriptor extends scalapb.GeneratedMessageCompanion[optic_shape_hash.shapehash.FieldDescriptor] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[optic_shape_hash.shapehash.FieldDescriptor] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): optic_shape_hash.shapehash.FieldDescriptor = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    optic_shape_hash.shapehash.FieldDescriptor(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[optic_shape_hash.shapehash.ShapeDescriptor]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[optic_shape_hash.shapehash.FieldDescriptor] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      optic_shape_hash.shapehash.FieldDescriptor(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[optic_shape_hash.shapehash.ShapeDescriptor]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ShapehashProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ShapehashProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = optic_shape_hash.shapehash.ShapeDescriptor
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = optic_shape_hash.shapehash.FieldDescriptor(
    key = "",
    hash = _root_.scala.None
  )
  implicit class FieldDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, optic_shape_hash.shapehash.FieldDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, optic_shape_hash.shapehash.FieldDescriptor](_l) {
    def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def hash: _root_.scalapb.lenses.Lens[UpperPB, optic_shape_hash.shapehash.ShapeDescriptor] = field(_.getHash)((c_, f_) => c_.copy(hash = Option(f_)))
    def optionalHash: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[optic_shape_hash.shapehash.ShapeDescriptor]] = field(_.hash)((c_, f_) => c_.copy(hash = f_))
  }
  final val KEY_FIELD_NUMBER = 1
  final val HASH_FIELD_NUMBER = 2
  def of(
    key: _root_.scala.Predef.String,
    hash: _root_.scala.Option[optic_shape_hash.shapehash.ShapeDescriptor]
  ): _root_.optic_shape_hash.shapehash.FieldDescriptor = _root_.optic_shape_hash.shapehash.FieldDescriptor(
    key,
    hash
  )
}
