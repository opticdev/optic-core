// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package optic_shape_hash.shapehash

@SerialVersionUID(0L)
final case class ShapeDescriptor(
    `type`: optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType = optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType.OBJECT,
    fields: _root_.scala.Seq[optic_shape_hash.shapehash.FieldDescriptor] = _root_.scala.Seq.empty,
    items: _root_.scala.Seq[optic_shape_hash.shapehash.ShapeDescriptor] = _root_.scala.Seq.empty,
    rules: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ShapeDescriptor] with scalapb.lenses.Updatable[ShapeDescriptor] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = `type`
        if (__value != optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType.OBJECT) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value.value)
        }
      };
      fields.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      items.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      rules.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = `type`
        if (__v != optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType.OBJECT) {
          _output__.writeEnum(1, __v.value)
        }
      };
      fields.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      items.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      rules.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): optic_shape_hash.shapehash.ShapeDescriptor = {
      var __type = this.`type`
      val __fields = (_root_.scala.collection.immutable.Vector.newBuilder[optic_shape_hash.shapehash.FieldDescriptor] ++= this.fields)
      val __items = (_root_.scala.collection.immutable.Vector.newBuilder[optic_shape_hash.shapehash.ShapeDescriptor] ++= this.items)
      val __rules = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.rules)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType.fromValue(_input__.readEnum())
          case 18 =>
            __fields += _root_.scalapb.LiteParser.readMessage(_input__, optic_shape_hash.shapehash.FieldDescriptor.defaultInstance)
          case 26 =>
            __items += _root_.scalapb.LiteParser.readMessage(_input__, optic_shape_hash.shapehash.ShapeDescriptor.defaultInstance)
          case 34 =>
            __rules += _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      optic_shape_hash.shapehash.ShapeDescriptor(
          `type` = __type,
          fields = __fields.result(),
          items = __items.result(),
          rules = __rules.result()
      )
    }
    def withType(__v: optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType): ShapeDescriptor = copy(`type` = __v)
    def clearFields = copy(fields = _root_.scala.Seq.empty)
    def addFields(__vs: optic_shape_hash.shapehash.FieldDescriptor*): ShapeDescriptor = addAllFields(__vs)
    def addAllFields(__vs: Iterable[optic_shape_hash.shapehash.FieldDescriptor]): ShapeDescriptor = copy(fields = fields ++ __vs)
    def withFields(__v: _root_.scala.Seq[optic_shape_hash.shapehash.FieldDescriptor]): ShapeDescriptor = copy(fields = __v)
    def clearItems = copy(items = _root_.scala.Seq.empty)
    def addItems(__vs: optic_shape_hash.shapehash.ShapeDescriptor*): ShapeDescriptor = addAllItems(__vs)
    def addAllItems(__vs: Iterable[optic_shape_hash.shapehash.ShapeDescriptor]): ShapeDescriptor = copy(items = items ++ __vs)
    def withItems(__v: _root_.scala.Seq[optic_shape_hash.shapehash.ShapeDescriptor]): ShapeDescriptor = copy(items = __v)
    def clearRules = copy(rules = _root_.scala.Seq.empty)
    def addRules(__vs: _root_.scala.Predef.String*): ShapeDescriptor = addAllRules(__vs)
    def addAllRules(__vs: Iterable[_root_.scala.Predef.String]): ShapeDescriptor = copy(rules = rules ++ __vs)
    def withRules(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ShapeDescriptor = copy(rules = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = `type`.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => fields
        case 3 => items
        case 4 => rules
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PRepeated(fields.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(items.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(rules.iterator.map(_root_.scalapb.descriptors.PString).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = optic_shape_hash.shapehash.ShapeDescriptor
}

object ShapeDescriptor extends scalapb.GeneratedMessageCompanion[optic_shape_hash.shapehash.ShapeDescriptor] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[optic_shape_hash.shapehash.ShapeDescriptor] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): optic_shape_hash.shapehash.ShapeDescriptor = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    optic_shape_hash.shapehash.ShapeDescriptor(
      optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType.fromValue(__fieldsMap.getOrElse(__fields.get(0), optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType.OBJECT.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[optic_shape_hash.shapehash.FieldDescriptor]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.Seq[optic_shape_hash.shapehash.ShapeDescriptor]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.Seq[_root_.scala.Predef.String]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[optic_shape_hash.shapehash.ShapeDescriptor] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      optic_shape_hash.shapehash.ShapeDescriptor(
        optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType.OBJECT.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[optic_shape_hash.shapehash.FieldDescriptor]]).getOrElse(_root_.scala.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[optic_shape_hash.shapehash.ShapeDescriptor]]).getOrElse(_root_.scala.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ShapehashProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ShapehashProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = optic_shape_hash.shapehash.FieldDescriptor
      case 3 => __out = optic_shape_hash.shapehash.ShapeDescriptor
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType
    }
  }
  lazy val defaultInstance = optic_shape_hash.shapehash.ShapeDescriptor(
    `type` = optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType.OBJECT,
    fields = _root_.scala.Seq.empty,
    items = _root_.scala.Seq.empty,
    rules = _root_.scala.Seq.empty
  )
  sealed trait PrimitiveType extends _root_.scalapb.GeneratedEnum {
    type EnumType = PrimitiveType
    def isObject: _root_.scala.Boolean = false
    def isArray: _root_.scala.Boolean = false
    def isString: _root_.scala.Boolean = false
    def isNumber: _root_.scala.Boolean = false
    def isBoolean: _root_.scala.Boolean = false
    def isNull: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[PrimitiveType] = optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType
  }
  
  object PrimitiveType extends _root_.scalapb.GeneratedEnumCompanion[PrimitiveType] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[PrimitiveType] = this
    @SerialVersionUID(0L)
    case object OBJECT extends PrimitiveType {
      val value = 0
      val index = 0
      val name = "OBJECT"
      override def isObject: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object ARRAY extends PrimitiveType {
      val value = 1
      val index = 1
      val name = "ARRAY"
      override def isArray: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STRING extends PrimitiveType {
      val value = 2
      val index = 2
      val name = "STRING"
      override def isString: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object NUMBER extends PrimitiveType {
      val value = 3
      val index = 3
      val name = "NUMBER"
      override def isNumber: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object BOOLEAN extends PrimitiveType {
      val value = 4
      val index = 4
      val name = "BOOLEAN"
      override def isBoolean: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object NULL extends PrimitiveType {
      val value = 5
      val index = 5
      val name = "NULL"
      override def isNull: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends PrimitiveType with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(OBJECT, ARRAY, STRING, NUMBER, BOOLEAN, NULL)
    def fromValue(value: _root_.scala.Int): PrimitiveType = value match {
      case 0 => OBJECT
      case 1 => ARRAY
      case 2 => STRING
      case 3 => NUMBER
      case 4 => BOOLEAN
      case 5 => NULL
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = optic_shape_hash.shapehash.ShapeDescriptor.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = optic_shape_hash.shapehash.ShapeDescriptor.scalaDescriptor.enums(0)
  }
  implicit class ShapeDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, optic_shape_hash.shapehash.ShapeDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, optic_shape_hash.shapehash.ShapeDescriptor](_l) {
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def fields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[optic_shape_hash.shapehash.FieldDescriptor]] = field(_.fields)((c_, f_) => c_.copy(fields = f_))
    def items: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[optic_shape_hash.shapehash.ShapeDescriptor]] = field(_.items)((c_, f_) => c_.copy(items = f_))
    def rules: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.rules)((c_, f_) => c_.copy(rules = f_))
  }
  final val TYPE_FIELD_NUMBER = 1
  final val FIELDS_FIELD_NUMBER = 2
  final val ITEMS_FIELD_NUMBER = 3
  final val RULES_FIELD_NUMBER = 4
  def of(
    `type`: optic_shape_hash.shapehash.ShapeDescriptor.PrimitiveType,
    fields: _root_.scala.Seq[optic_shape_hash.shapehash.FieldDescriptor],
    items: _root_.scala.Seq[optic_shape_hash.shapehash.ShapeDescriptor],
    rules: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.optic_shape_hash.shapehash.ShapeDescriptor = _root_.optic_shape_hash.shapehash.ShapeDescriptor(
    `type`,
    fields,
    items,
    rules
  )
}
